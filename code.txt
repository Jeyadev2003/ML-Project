import pyttsx3
import speech_recognition as sr
import os
import webbrowser
import openai
from config import apikey
import datetime
import random
import numpy as np
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import pywhatkit
import time
import requests
from bs4 import BeautifulSoup


chatStr = ""
# https://youtu.be/Z3ZAJoi4x6Q
def chat(query):
    global chatStr
    print(chatStr)
    openai.api_key = apikey
    chatStr += f" Me: \n{query}\n Athena: "
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt= chatStr,
        temperature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    # todo: Wrap this inside of a  try catch block
    chatStr += f"{response['choices'][0]['text']}\n"
    return response["choices"][0]["text"]


def ai(prompt):
    openai.api_key = apikey
    text = f"OpenAI response for Prompt: {prompt} \n *************************\n\n"

    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=prompt,
        temperature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0
    )
    text += response["choices"][0]["text"]
    if not os.path.exists("Openai"):
        os.mkdir("Openai")

    # with open(f"Openai/prompt- {random.randint(1, 2343434356)}", "w") as f:
    with open(f"Openai/{''.join(prompt.split('intelligence')[1:]).strip() }.txt", "w") as f:
        f.write(text)

def takeCommand():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        # r.pause_threshold =  0.6
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
        try:
            #print("Recognizing...")
            query = r.recognize_google(audio, language="en-in")
            #print(f"User: {query}")
            return query
        except Exception as e:
            return "Sorry some error occured"

if __name__ == '__main__':
    print('Welcome Back Jeyadev')

    # Initialize pyttsx3 engine
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    engine.setProperty('voice', voices[1].id)
    rate = engine.getProperty('rate')
    engine.setProperty('rate', rate * 0.7)

    # Use the engine to say "Jarvis A.I"
    engine.say("Hi there, I'm Athena your voice assistant")
    engine.runAndWait()  

    while True:
        print("Listening...")
        query = takeCommand()
        # todo: Add more sites
        sites = [["youtube", "https://www.youtube.com"], ["wikipedia", "https://www.wikipedia.com"], ["google", "https://www.google.com"],]
        for site in sites:
            if f"Open {site[0]}".lower() in query.lower():
                engine.say(f"Opening {site[0]} ")
                webbrowser.open(site[1])
        
        if "play" in query.lower():
            song_name = query.replace("play", "").strip()
            engine.say(f"Playing '{song_name}' on YouTube...")
            pywhatkit.playonyt(song_name)
            
        elif "the time" in query:
            hour = datetime.datetime.now().strftime("%H")
            min = datetime.datetime.now().strftime("%M")
            engine.say(f"Sir time is {hour} past {min} minutes")

        elif "open facetime".lower() in query.lower():
            os.system(f"open /System/Applications/FaceTime.app")

        elif "open pass".lower() in query.lower():
            os.system(f"open /Applications/Passky.app")

        elif "Using artificial intelligence".lower() in query.lower():
            ai(prompt=query)

        elif "exit athena".lower() in query.lower():
            exit()

        elif "reset chat".lower() in query.lower():
            chatStr = ""

        else:
             chatStr = ""
             chat(query)
             response=chat(query)
             engine.setProperty('rate', rate * 0.9) 
             engine.say(response)  
             engine.runAndWait()  







    
